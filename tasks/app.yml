---

- name: "Create app directory {{ APP_PATH }}"
  file:
      path={{ APP_PATH }}
      state=directory
      mode=755
      owner=root
      group=root

- name: Save local docker image
  cmd: docker save microdisseny_erp:latest $PWD/tmp/"{{ APP_NAME }}".tar

- name: copy template_vars.ini
  copy:
    src={{ APP_TEMPLATE_VARS_SRC }} dest={{ APP_PATH }}/template_vars.ini
    owner=root group=root mode=0700
  when: APP_TEMPLATE_VARS_SRC is defined and APP_TEMPLATE_VARS_SRC != '' and  APP_DJANGO == True

- name: Set APP_ENVIRONMENT_NAME if not defined
  set_fact:
     APP_ENVIRONMENT_NAME: "{{ APP_NAME }}"
  when: APP_ENVIRONMENT_NAME is not defined or APP_ENVIRONMENT_NAME == ''

- name: uWSGI configuration
  include: uwsgi.yml

# - name: run migrations
#   django_manage:
#     command: migrate
#     app_path: "{{ APP_PATH }}/app/"
#     virtualenv: "{{ APP_PATH }}/venv/"
#   environment: "{{ app_environment }}"
#   when: APP_DJANGO == True and APP_RUN_MIGRATIONS == True
#   become: true
#   become_user: www-data
#   tags: migrate
#
# - name: "Load fixtures: {{ APP_LOAD_FIXTURES }}"
#   django_manage:
#     command: loaddata
#     app_path: "{{ APP_PATH }}/app/"
#     virtualenv: "{{ APP_PATH }}/venv/"
#     fixtures: "{{ APP_LOAD_FIXTURES }}"
#   environment: "{{ app_environment }}"
#   become: true
#   become_user: www-data
#   tags: loaddata
#   when: "(APP_DJANGO == True) and (APP_LOAD_FIXTURES is not none) and (APP_LOAD_FIXTURES != '')"

- name: Create app/static directory
  file:
      path={{ APP_PATH }}/static
      state=directory
      mode=750
      owner=www-data
      group=www-data

# - name: copy app static files
#   django_manage:
#     command: collectstatic
#     app_path: "{{ APP_PATH }}/app/"
#     virtualenv: "{{ APP_PATH }}/venv/"
#   environment: "{{ app_environment }}"
#   when: APP_DJANGO == True
#   become: true
#   become_user: www-data

# - name: reload app
#   file: path={{ APP_PATH }}/{{ UWSGI_INI_FILE }} state=touch
#   tags: code, config
